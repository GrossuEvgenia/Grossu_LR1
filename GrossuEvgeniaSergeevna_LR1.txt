


Для начала работы, с официального сайта был установлен Git.
Была проведена его первоначальная настройка. А именно, было указано имя и адрес электронной почты пользователя, с помощью команд:
	
	$git config --global user.name"<...>"
	$git config --global user.eamil"<...>"

Еще были настроены параметры окончания строки, за счет команд:
	
	$git config --global core.autocrlf true
	$git config --global core.safecrlf true

Для непосредственной работы был создан каталог git_lab.
Он был инициализирован в системе git, благодаря команде:
	
	$git init

В каталоге, был создан текстовый файл отчета в кодировке Win1251.
Он был проиндексирован, то есть добавлен в git среду данного каталога, за счет команды:
	
	$git add . (точка здесь, является составной частью команды)

Был создан первый коммит, благодаря команде:
	
	$git commit -m "first_commit" (в кавычках указывается комментарий к коммиту)
	
После добавления в отчет текста, расположенного выше, был создан второй коммит.
Для демонстрации игнорирования файлов, добавим в каталог файл с расширением .gitignore, за счёт команд:
	
	$ touch .gitignore
	$git config --global core.exludesfile~/.gitignore

Также добавим в каталог файл, на котором покажем игнорирование for_ignore.txt.
Его имя запишем в .gitignore, теперь этот файл будет игнорироваться системой.
С помощью  следующих команд можно просмотреть проигнорированный файл и убрать его:
	
	$git status --ignored
	$git clean -df

Для  сравнения изменений в рабочей директории, используется команда:
	
	$git diff
	
Для сравнения двух коммитов, используется команда:
	
	$git diff <...> <...> (где вместо <...> пишется индекс коммита)
	
Для демонстрации удаления, создадим  в каталоге проекта дополнительный файл for_delete.txt.
Проиндексируем и удалим его, с помощью следующих команд:

	$git add for_delete.txt
	Sgit rm -f for_delete.txt
	
Для демонстрации перемещения фалов, создадим дополнительный каталог, за счет команды:

	$mkdir dop_katalog
	
Также создадим новый файл, специально для перемещения, for_move_in_dop_katalog.txt, инициализируем его и переместим:

	$git  add for_move_in_dop_katalog.txt
	$git mv for_move_in_dop_katalog.txt dop_katalog
	
Для рассмотрения принципом работы команды $git log, запустим ее основные модификации.
Сама $git log показывает историю создания коммитов в обратном порядке (сначала новые потом старые).
Команды $git log -p и $git log -p --word-diff отражают суть изменений коммитов, первая полностью, а вторая построчно.
Команда $git log --stat показывает количество изменений, добавленных в коммит.

Для демонстрации отмены изменений, совершим их, а именно создадим, инициализируем новый файл и создадим коммит.
Чтобы отменить эти действия используем команду:

	$git revert HEAD (убирает коммит и удалит созданный для демонстрации файл)
	
Для того, чтобы показать работу с метками установим их на первый и последний коммит, за счет команды:

	$git tag -a <...> <...> (где первая <...> -это название метки, а вторая индекс коммита>
	
Чтобы просмотреть установленные метки, запустим команду:

	$git tag
	
Чтобы просмотреть информацию о коммите по метке, запустим команду:

	$git show <...> (где <...> название метки)
	
Чтобы создать дополнительную ветку, введем команду:

	$git branch <...> (где <...> название новой ветки)
	
Чтобы перемещаться по веткам, используем команду:

	$git checkout <...> (где <...> название ветки)
	
Чтобы слить две ветки (master и новая ветка) используем команд:

	$git merge <...> (где <..> название новой ветки)
	
Чтобы удалить ветку, введем команду:

	$git branch -d new branch
	
Чтобы продемонстрировать решение конфликта слияния, создадим его.
Для этого создадим дополнительный текстовый файл, в который внесем изменения в ветке master. Потом перейдем, в заранее созданную ветку, и внесем изменения в доп. файл там. 
При перемещении обратно проведем слияние, и заметим сообщение об ошибке. Чтобы исправить ее, изменим файл, и проведем слияния. Заметим, что конфликта больше нет.

Для демонстрации работы механизма git stash, внесем изменения в ранее созданные файлы, и напишем команду ,скроющую эти изменения:

	$git stash
	
Добавим еще изменений и тоже скроим их, для этого запустим команду:

	$git stash save '<...>' (где <...> комментарий к изменению)
	
Чтобы использовать эти изменения, но при этом оставить их в stash, запишем команду:

	$git stash apply
	
Для создания удаленного репозитория на GitHub, была проведена регистрация и создан репозиторий.
За счет следующих команд, в удалённый репозиторий был добавлен локальный:

	$ git remote set-url origin <...> (где <...> это адрес репозитория на GitHub)
	$git push -u origin master
	
Чтобы настрокить доступ через ssh ключи, выполним следующим команды, которые сгенерируют ключи:

	$ssh-keygen -t rsa -b 4096 -C "your_email@example.com"
	$ eval $(ssh-agent -s)
	$ ssh-add ~/.ssh/id_rsa
	$ ssh-add ~/.ssh/id_rsa
Добавим их на Github.
Используя, следующую команду склонируем репозиторий:

	$ git clone "git@github.com:GrossuEvgenia/GrossuEvgenia_LR1.git"


 	 

 	 
	